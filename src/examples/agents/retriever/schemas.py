from pydantic import BaseModel, Field
from typing_extensions import Annotated
from langchain_core.documents import Document
from operator import add


class GeneratedQueries(BaseModel):
    """Schema used to generate search queries."""

    queries: list[str] = Field(
        description="A list of search queries to retrieve documents from the vector store."
    )


class SingleQueryState(BaseModel):
    """Private state for each of the query_documents nodes running in parallel."""

    query: str = Field(
        description="The query used to retrieve documents from the vector store."
    )


class InputState(BaseModel):
    """Input state for the Retriever agent graph."""

    research_task: str = Field(
        description="A step in the overarching research plan generated by the ResearchAgent."
    )


class RetrieverState(BaseModel):
    """State for the Retriever agent graph."""

    research_task: str = Field(
        description="A step in the overarching research plan generated by the ResearchAgent."
    )
    search_queries: list[str] = Field(
        default=[],
        description="A list of search queries to retrieve documents from the vector store in order to answer the research task.",
    )
    retrieved_chunks: Annotated[list[Document], add] = Field(
        default=[],
        description="A list of retrieved document chunks from the vector store.",
    )
